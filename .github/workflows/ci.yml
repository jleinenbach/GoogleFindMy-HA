name: CI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  hassfest:
    name: Hassfest validation
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Wait for hassfest auto-fix workflow to finish
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        uses: lewagon/wait-on-check-action@v1.3.3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          check-regexp: '^[Hh]assfest( \(auto-fix\)( / hassfest.*)?)?$'
          allowed-conclusions: 'success,failure,neutral'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

      - name: Run hassfest
        uses: home-assistant/actions/hassfest@master

  tests:
    name: Lint and tests
    runs-on: ubuntu-latest
    needs: hassfest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt', 'custom_components/googlefindmy/requirements.txt', 'pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev.txt

      - name: Run pre-commit (still required locally; pre-commit.ci auto-fixes PRs)
        run: |
          set -eo pipefail
          pre-commit run --all-files --show-diff-on-failure --color=always || (
            echo "::group::pre-commit status"
            git status --short
            echo "::endgroup::"
            echo "::group::pre-commit diff"
            git diff
            echo "::endgroup::"
            exit 1
          )

      - name: Run pytest (quiet) and capture
        run: |
          set -o pipefail
          pytest -q 2>&1 | tee pytest_output.log

      - name: Write short summary to GitHub Step Summary
        if: always()
        run: |
          {
            echo "## Pytest summary"
            echo
            echo '```'
            tail -n 200 pytest_output.log
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
